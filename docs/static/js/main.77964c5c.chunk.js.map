{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","props","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","index","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMA8BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAfhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZhB,kBAedM,GAfc,4CAAH,sDCYLO,G,MATK,SAACC,GACnB,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAMN,IAAIR,IAAKiB,IAAKH,EAAMN,IAAIE,QACxC,4BAAII,EAAMN,IAAIE,aCeLQ,EAlBC,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SACjB,ECF0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAACC,GACtBH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGZ,CAACrB,IAEGsB,EDb2BK,CAAa3B,GAAjCa,EAAd,EAAQN,KAAcc,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDjB,IAClDqB,GACC,mBAAGJ,UAAU,mCAAb,wBAEF,qBAAKA,UAAU,YAAf,SACGJ,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,CAA0BA,IAAKA,GAAbA,EAAIC,aEOjBiB,EAlBM,WACnB,MAAoC1C,mBAAS,CAAC,YAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG4C,EAAWpB,KAAI,SAACT,EAAU8B,GAAX,OACd,cAAC,EAAD,CAAqB9B,SAAUA,GAAjB8B,YCHTC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,SAK1DX,M","file":"static/js/main.77964c5c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=i8szfNx9PnSnNYFUWSpjbRZRtlLfFbLn`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\nimport \"animate.css\";\n\nconst GifGridItem = (props) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={props.img.url} alt={props.img.title} />\n      <p>{props.img.title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Loading...</p>\n      )}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} img={img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Beatles\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category, index) => (\n          <GifGrid key={index} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}